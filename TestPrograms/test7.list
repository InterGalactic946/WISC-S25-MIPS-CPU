///////////////////////////////////////////////////////
// Branch Hazard Test Program (Register & Condition) //
// This program demonstrates register and condition  //
// hazards in a pipelined processor.                 //
///////////////////////////////////////////////////////

// Initialize registers and array base address
LLB R1, 0x05      // Loop counter (R1 = 5 elements)
LLB R2, 0x20      // Base address of the array (R2 = 0x0020)
LLB R3, 0x00      // Sum accumulator (R3 = 0x0000)
LLB R4, 0x05      // Constant: 5 (for averaging)
LLB R5, 0x01      // Increment value (R5 = 1)
LLB R9, 0x02      // Increment value (R9 = 2)


// Load array values into memory (initialization)
LLB R6, 0x22      // Array element 1
SW R6, R2, 0      // Store 0x0003 at memory[0x0020]

// Test Register Hazard with LW (load word instruction)
TEST_LW_HAZARD:
    LW R3, R2, 0    // Load value from memory[0x20] into R3 (e.g., R3 = value from address 0)
    BR 000, R3      // Branch if Not Equal (Z = 0) → should branch if R2 != 0

    // Code after branch (if branch not taken)
    ADD R3, R3, R4  // This should execute if branch not taken

// Test Register Hazard with RED (reduction instruction)
TEST_RED_HAZARD:
    RED R2, R3, R0  // Reduce R3, result stored in R2
    BR 000, R2      // Branch if Not Equal (Z = 0) → should branch if R2 != 0

    // Code after branch (if branch not taken)
    ADD R3, R3, R4  // This should execute if branch not taken

// Test Register Hazard with PADDSB (parallel addition signed bytes)
TEST_PADDSB_HAZARD:
    PADDSB R2, R3, R4  // Parallel add signed bytes (R2 = R3 + R4)
    BR 000, R2         // Branch if Not Equal (Z = 0) → should branch if R2 != 0

    // Code after branch (if branch not taken)
    ADD R3, R3, R4     // This should execute if branch not taken

// Test Condition Code Hazard with ADD (affects condition flags)
TEST_ADD_HAZARD:
    ADD R2, R1, R4    // R2 = R1 + R4, affects condition codes (Z, N)
    BR 001, R2        // Branch if Equal (Z = 1) → should branch if Z = 1 (R2 = 0)
    
    // Code after branch (if branch not taken)
    ADD R3, R3, R4    // This should execute if branch not taken

// Test Condition Code Hazard with SUB (affects condition flags)
TEST_SUB_HAZARD:
    SUB R2, R1, R4    // R2 = R1 - R4, affects condition codes (Z, N)
    BR 001, R2        // Branch if Equal (Z = 1) → should branch if Z = 1 (R2 = 0)

    // Code after branch (if branch not taken)
    ADD R3, R3, R4    // This should execute if branch not taken

// Test Both Register and Condition Code Hazard with ADD
TEST_BOTH_ADD_HAZARD:
    ADD R1, R1, R4    // R1 = R1 + R4, affects condition codes (Z, N) and modifies R1
    BR 001, R1        // Branch if Equal (Z = 1) → should branch if R1 = 0 (Z = 1)
    
    // Code after branch (if branch not taken)
    ADD R3, R3, R4    // This should execute if branch not taken

// Test Both Register and Condition Code Hazard with SUB
TEST_BOTH_SUB_HAZARD:
    SUB R1, R1, R4    // R1 = R1 - R4, affects condition codes (Z, N) and modifies R1
    BR 001, R1        // Branch if Equal (Z = 1) → should branch if R1 = 0 (Z = 1)

    // Code after branch (if branch not taken)
    ADD R3, R3, R4    // This should execute if branch not taken

END:
HLT                // Halt execution
