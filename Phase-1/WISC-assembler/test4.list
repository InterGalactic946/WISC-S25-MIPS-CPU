    // Initialize registers
    LLB R1, 0x02      // Load lower byte of R1 with 0x02
    LHB R1, 0x00      // Load upper byte of R1 with 0x00 (R1 = 0x0002)
    LLB R2, 0x03      // Load lower byte of R2 with 0x03
    LHB R2, 0x00      // Load upper byte of R2 with 0x00 (R2 = 0x0003)
    LLB R3, 0x04      // Load lower byte of R3 with 0x04
    LHB R3, 0x00      // Load upper byte of R3 with 0x00 (R3 = 0x0004)

    // Arithmetic operations
    ADD R4, R1, R2    // R4 = R1 + R2 (0x0002 + 0x0003)
    SUB R5, R3, R1    // R5 = R3 - R1 (0x0004 - 0x0002)
    XOR R6, R4, R5    // R6 = R4 ^ R5 (Bitwise XOR)

    // Reduction operation (assuming RED requires 3 args)
    RED R7, R6, R0    // Reduce R6, store in R7 (R0 as dummy/unused operand)

    // Shift operations
    SLL R8, R2, 2     // R8 = R2 << 2 (Logical left shift by 2)
    SRA R9, R3, 1     // R9 = R3 >> 1 (Arithmetic right shift by 1)
    ROR R10, R4, 3    // R10 = Rotate right R4 by 3 bits

    // Parallel Addition
    PADDSB R11, R1, R3 // Parallel Add Signed Bytes

    // Load and Store operations
    LLB R12, 0x10     // Load lower byte with memory address 0x10
    LHB R12, 0x00     // Load upper byte with 0x00 (Address = 0x0010)
    SW R12, R4        // Store R4 at memory[0x0010]
    LW R13, R12       // Load R13 from memory[0x0010]

    // Conditional branching tests
    SUB R14, R1, R2   // R14 = R1 - R2 (Should be negative)
    B 011, L1         // Branch if Less Than (N = 1) → should branch

    ADD R15, R3, R1   // R15 = R3 + R1 (Should execute if branch fails)

L1:
    B 001, L2         // Branch if Equal (Z = 1) → should not branch
    B 000, L3         // Branch if Not Equal (Z = 0) → should branch

L2:
    ADD R15, R1, R1   // Shouldn't execute
    HLT               // Shouldn't reach here

L3:
    B 100, L4         // Branch if Greater Than or Equal (Z = 1 or Z = N = 0)
    B 101, L5         // Branch if Less Than or Equal (N = 1 or Z = 1) → should branch

L4:
    HLT               // Shouldn't reach here

L5:
    PCS R14           // Store PC in R14
    HLT               // Halt execution

    // Unreachable instruction
    ADD R15, R3, R2   // Shouldn't execute
    HLT               // Halt again
